worker_processes  1; # 1 プロセスで複数リクエストを処理
error_log   /dev/stderr debug; # デバッグログ
events {
    worker_connections  1024; # 同時接続数
}

http {
    include       mime.types; # MIME タイプと拡張子の関連付け定義ファイル読み込み
    default_type  application/octet-stream; # MIME タイプのデフォルト
    access_log   /dev/stdout; # アクセスログ
    rewrite_log on; # リダイレクトのロギング有効化

    sendfile        on; # クライアントへのレスポンス処理を sendfile システムコール API で行うレスポンス改善処理
    keepalive_timeout  65; # キープアライブのタイムアウト時間は 65 秒
    server_tokens off; # サーバ情報を非表示

    # HTTPリクエストヘッダの「Authorization」から「Bearer」の文字列を除去し、アクセストークンを取得
    map $http_authorization $access_token {
        default "";
        "~^Bearer\s+(.*)$" $1;
    }

    # メインサーバーブロック
    server {
        listen 8081; # nginx サーバポート

        # 接続情報
        set $APIKEY "xxxxx";
        # set $PROTOCOL "http";
        set $PROTOCOL "https";

        # 空域デジタルツイン
        set $DEGITAL_TWIN_DOMAIN xxxxx;
        # 航路画定
        set $AIRWAY_DESIGN_DOMAIN xxxxx;
        # 航路予約
        set $AIRWAY_RESERVATION_DOMAIN xxxxx;
        set $AIRWAY_RESERVATION_APIKEY "xxxxx";
        # 安全管理
        set $SAFETY_DOMAIN xxxxx;
        # ポート・機体管理
        set $ASSET_DOMAIN xxxxx;
        # 外部システム連携
        set $EXTERNAL_DOMAIN xxxxx;
        # ユーザ認証システム
        set $USER_AUTH_DOMAIN xxxxx;

        # ヘルスチェック
        location /health {
            access_log off;
            return 204;
            break;
        }

        # 空域デジタルツイン
        location /airDtw/ {
            resolver 1.1.1.1 8.8.8.8 valid=60s; # DNS リゾルバ設定、Cloudflare/Google のパブリック DNS を指定
            # プリフライトリクエスト
            # 本リクエスト発生時、レスポンスヘッダに CORS ヘッダを追加し 204 を返却
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*" always;
                add_header Access-Control-Allow-Methods "*" always;
                add_header Access-Control-Allow-Headers "*" always;
                add_header Access-Control-Max-Age 3600;
                return 204;
            }
            # シンプルリクエスト
            # 本リクエスト時、レスポンスヘッダに CORS ヘッダを追加するが、バックエンドサービスで CORS ヘッダ対応しているので、ヘッダ重複を防ぐため、当該ヘッダをハイドする
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "*" always;
            add_header Access-Control-Allow-Headers "*" always;
            add_header Access-Control-Max-Age 3600;
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Headers;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Max-Age;

            proxy_set_header apiKey ""; # バックエンドサービスに連携しない
            proxy_set_header Authorization ""; # バックエンドサービスに連携しない

            # 内部認証リクエストを実行し、トークンイントロスペクション API にて、ステータスコードが 200 の場合はバックエンドサービスを実行
            # 但し、認証失敗 ( 有効期限切れ含む ) 時は、401 を返却
            access_by_lua_block {
                ngx.req.read_body()
                local body = ngx.req.get_body_data()

                local res = ngx.location.capture("/auth", {
                    method = ngx.HTTP_POST,
                    body = body
                })

                -- 認証失敗時は nginx で定義した各レスポンスを返却する
                if res.status == 400 or res.status == 404 or res.status == 500 or res.status == 503 then
                    ngx.exit(500);
                elseif res.status == 401 then
                    ngx.exit(401);
                elseif res.status == 403 then
                    ngx.exit(403);
                end

                -- 認証失敗 ( 有効期限切れ含む ) 時は、nginx で定義した 401 を返却
                if res.body and string.match(res.body, '"active":false') then
                    ngx.exit(401);
                end
            }

            proxy_pass $PROTOCOL://$DEGITAL_TWIN_DOMAIN;
        }

        # 航路画定
        location /airwayDesign/ {
            resolver 1.1.1.1 8.8.8.8 valid=60s; # DNS リゾルバ設定、Cloudflare/Google のパブリック DNS を指定
            # プリフライトリクエスト
            # 本リクエスト発生時、レスポンスヘッダに CORS ヘッダを追加し 204 を返却
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*" always;
                add_header Access-Control-Allow-Methods "*" always;
                add_header Access-Control-Allow-Headers "*" always;
                add_header Access-Control-Max-Age 3600;
                return 204;
            }
            # シンプルリクエスト
            # 本リクエスト時、レスポンスヘッダに CORS ヘッダを追加するが、バックエンドサービスで CORS ヘッダ対応しているので、ヘッダ重複を防ぐため、当該ヘッダをハイドする
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "*" always;
            add_header Access-Control-Allow-Headers "*" always;
            add_header Access-Control-Max-Age 3600;
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Headers;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Max-Age;

            proxy_set_header apiKey ""; # バックエンドサービスに連携しない
            proxy_set_header Authorization ""; # バックエンドサービスに連携しない

            # 内部認証リクエストを実行し、トークンイントロスペクション API にて、ステータスコードが 200 の場合はバックエンドサービスを実行
            # 但し、認証失敗 ( 有効期限切れ含む ) 時は、401 を返却
            access_by_lua_block {
                ngx.req.read_body()
                local body = ngx.req.get_body_data()

                local res = ngx.location.capture("/auth", {
                    method = ngx.HTTP_POST,
                    body = body
                })

                -- 認証失敗時は nginx で定義した各レスポンスを返却する
                if res.status == 400 or res.status == 404 or res.status == 500 or res.status == 503 then
                    ngx.exit(500);
                elseif res.status == 401 then
                    ngx.exit(401);
                elseif res.status == 403 then
                    ngx.exit(403);
                end

                -- 認証失敗 ( 有効期限切れ含む ) 時は、nginx で定義した 401 を返却
                if res.body and string.match(res.body, '"active":false') then
                    ngx.exit(401);
                end
            }

            proxy_pass $PROTOCOL://$AIRWAY_DESIGN_DOMAIN;
        }

        # 航路予約
        # パス判定はアクセス URL に airwayReservations を含むこと
        location ~ (?:^|/)airwayReservations(?=/|$) {
            resolver 1.1.1.1 8.8.8.8 valid=60s; # DNS リゾルバ設定、Cloudflare/Google のパブリック DNS を指定
            # プリフライトリクエスト
            # 本リクエスト発生時、レスポンスヘッダに CORS ヘッダを追加し 204 を返却
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*" always;
                add_header Access-Control-Allow-Methods "*" always;
                add_header Access-Control-Allow-Headers "*" always;
                add_header Access-Control-Max-Age 3600;
                return 204;
            }
            # シンプルリクエスト
            # 本リクエスト時、レスポンスヘッダに CORS ヘッダを追加するが、バックエンドサービスで CORS ヘッダ対応しているので、ヘッダ重複を防ぐため、当該ヘッダをハイドする
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "*" always;
            add_header Access-Control-Allow-Headers "*" always;
            add_header Access-Control-Max-Age 3600;
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Headers;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Max-Age;

            proxy_set_header apiKey ""; # バックエンドサービスに連携しない
            proxy_set_header Authorization $AIRWAY_RESERVATION_APIKEY;

            # 内部認証リクエストを実行し、トークンイントロスペクション API にて、ステータスコードが 200 の場合はバックエンドサービスを実行
            # 但し、認証失敗 ( 有効期限切れ含む ) 時は、401 を返却
            access_by_lua_block {
                ngx.req.read_body()
                local body = ngx.req.get_body_data()

                local res = ngx.location.capture("/auth", {
                    method = ngx.HTTP_POST,
                    body = body
                })

                -- 認証失敗時は nginx で定義した各レスポンスを返却する
                if res.status == 400 or res.status == 404 or res.status == 500 or res.status == 503 then
                    ngx.exit(500);
                elseif res.status == 401 then
                    ngx.exit(401);
                elseif res.status == 403 then
                    ngx.exit(403);
                end

                -- 認証失敗 ( 有効期限切れ含む ) 時は、nginx で定義した 401 を返却
                if res.body and string.match(res.body, '"active":false') then
                    ngx.exit(401);
                end
            }
            proxy_ssl_server_name on; # 転送先へのHTTP(S)接続時に TLS SNI を有効化し、クライアントが接続する FQDN をバックエンドサービスに送る
            proxy_pass $PROTOCOL://$AIRWAY_RESERVATION_DOMAIN;
        }

        # 安全管理
        location /safetyManagement/ {
            resolver 1.1.1.1 8.8.8.8 valid=60s; # DNS リゾルバ設定、Cloudflare/Google のパブリック DNS を指定
            # プリフライトリクエスト
            # 本リクエスト発生時、レスポンスヘッダに CORS ヘッダを追加し 204 を返却
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*" always;
                add_header Access-Control-Allow-Methods "*" always;
                add_header Access-Control-Allow-Headers "*" always;
                add_header Access-Control-Max-Age 3600;
                return 204;
            }
            # シンプルリクエスト
            # 本リクエスト時、レスポンスヘッダに CORS ヘッダを追加するが、バックエンドサービスで CORS ヘッダ対応しているので、ヘッダ重複を防ぐため、当該ヘッダをハイドする
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "*" always;
            add_header Access-Control-Allow-Headers "*" always;
            add_header Access-Control-Max-Age 3600;
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Headers;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Max-Age;

            proxy_set_header apiKey ""; # バックエンドサービスに連携しない
            proxy_set_header Authorization ""; # バックエンドサービスに連携しない

            # 内部認証リクエストを実行し、トークンイントロスペクション API にて、ステータスコードが 200 の場合はバックエンドサービスを実行
            # 但し、認証失敗 ( 有効期限切れ含む ) 時は、401 を返却
            access_by_lua_block {
                ngx.req.read_body()
                local body = ngx.req.get_body_data()

                local res = ngx.location.capture("/auth", {
                    method = ngx.HTTP_POST,
                    body = body
                })

                -- 認証失敗時は nginx で定義した各レスポンスを返却する
                if res.status == 400 or res.status == 404 or res.status == 500 or res.status == 503 then
                    ngx.exit(500);
                elseif res.status == 401 then
                    ngx.exit(401);
                elseif res.status == 403 then
                    ngx.exit(403);
                end

                -- 認証失敗 ( 有効期限切れ含む ) 時は、nginx で定義した 401 を返却
                if res.body and string.match(res.body, '"active":false') then
                    ngx.exit(401);
                end
            }

            proxy_pass $PROTOCOL://$SAFETY_DOMAIN;
        }

        # ポート・機体管理
        location /asset/ {
            resolver 1.1.1.1 8.8.8.8 valid=60s; # DNS リゾルバ設定、Cloudflare/Google のパブリック DNS を指定
            # プリフライトリクエスト
            # 本リクエスト発生時、レスポンスヘッダに CORS ヘッダを追加し 204 を返却
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*" always;
                add_header Access-Control-Allow-Methods "*" always;
                add_header Access-Control-Allow-Headers "*" always;
                add_header Access-Control-Max-Age 3600;
                return 204;
            }
            # シンプルリクエスト
            # 本リクエスト時、レスポンスヘッダに CORS ヘッダを追加するが、バックエンドサービスで CORS ヘッダ対応しているので、ヘッダ重複を防ぐため、当該ヘッダをハイドする
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "*" always;
            add_header Access-Control-Allow-Headers "*" always;
            add_header Access-Control-Max-Age 3600;
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Headers;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Max-Age;

            proxy_set_header apiKey ""; # バックエンドサービスに連携しない
            proxy_set_header Authorization ""; # バックエンドサービスに連携しない

            # 内部認証リクエストを実行し、トークンイントロスペクション API にて、ステータスコードが 200 の場合はバックエンドサービスを実行
            # 但し、認証失敗 ( 有効期限切れ含む ) 時は、401 を返却
            access_by_lua_block {
                ngx.req.read_body()
                local body = ngx.req.get_body_data()

                local res = ngx.location.capture("/auth", {
                    method = ngx.HTTP_POST,
                    body = body
                })

                -- 認証失敗時は nginx で定義した各レスポンスを返却する
                if res.status == 400 or res.status == 404 or res.status == 500 or res.status == 503 then
                    ngx.exit(500);
                elseif res.status == 401 then
                    ngx.exit(401);
                elseif res.status == 403 then
                    ngx.exit(403);
                end

                -- 認証失敗 ( 有効期限切れ含む ) 時は、nginx で定義した 401 を返却
                if res.body and string.match(res.body, '"active":false') then
                    ngx.exit(401);
                end
            }

            proxy_pass $PROTOCOL://$ASSET_DOMAIN;
        }

        # 外部システム連携
        location /external/ {
            resolver 1.1.1.1 8.8.8.8 valid=60s; # DNS リゾルバ設定、Cloudflare/Google のパブリック DNS を指定
            # プリフライトリクエスト
            # 本リクエスト発生時、レスポンスヘッダに CORS ヘッダを追加し 204 を返却
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*" always;
                add_header Access-Control-Allow-Methods "*" always;
                add_header Access-Control-Allow-Headers "*" always;
                add_header Access-Control-Max-Age 3600;
                return 204;
            }
            # シンプルリクエスト
            # 本リクエスト時、レスポンスヘッダに CORS ヘッダを追加するが、バックエンドサービスで CORS ヘッダ対応しているので、ヘッダ重複を防ぐため、当該ヘッダをハイドする
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "*" always;
            add_header Access-Control-Allow-Headers "*" always;
            add_header Access-Control-Max-Age 3600;
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Headers;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Max-Age;

            proxy_set_header apiKey ""; # バックエンドサービスに連携しない
            proxy_set_header Authorization ""; # バックエンドサービスに連携しない

            # 内部認証リクエストを実行し、トークンイントロスペクション API にて、ステータスコードが 200 の場合はバックエンドサービスを実行
            # 但し、認証失敗 ( 有効期限切れ含む ) 時は、401 を返却
            access_by_lua_block {
                ngx.req.read_body()
                local body = ngx.req.get_body_data()

                local res = ngx.location.capture("/auth", {
                    method = ngx.HTTP_POST,
                    body = body
                })

                -- 認証失敗時は nginx で定義した各レスポンスを返却する
                if res.status == 400 or res.status == 404 or res.status == 500 or res.status == 503 then
                    ngx.exit(500);
                elseif res.status == 401 then
                    ngx.exit(401);
                elseif res.status == 403 then
                    ngx.exit(403);
                end

                -- 認証失敗 ( 有効期限切れ含む ) 時は、nginx で定義した 401 を返却
                if res.body and string.match(res.body, '"active":false') then
                    ngx.exit(401);
                end
            }

            proxy_pass $PROTOCOL://$EXTERNAL_DOMAIN;
        }

        # 内部認証エンドポイント
        # ユーザ認証システムのトークンイントロスペクション API 実行
        location = /auth {
            internal; # 外部からのアクセス不可
            resolver 1.1.1.1 8.8.8.8 valid=60s; # DNS リゾルバ設定、Cloudflare/Google のパブリック DNS を指定
            proxy_pass https://$USER_AUTH_DOMAIN/api/v2/systemAuth/token;
            proxy_intercept_errors on; # リバースプロキシ時のカスタムエラーページ有効化
            proxy_pass_request_body on; # リクエストボディの送信有効化を明記
            proxy_set_header Content-Type "application/json";
            proxy_set_header apiKey $APIKEY; # トークンイントロスペクション API 用のキー
            proxy_set_header Authorization ""; # ユーザ認証システムに連携しない
            proxy_set_body '{"idToken": "$access_token"}'; # 当該 API の idToken に、クライアントから送信される Bearer トークンをセット
        }

        # ユーザ認証システムからの401エラーハンドリング
        error_page 401 = @error401;
        location @error401 {
            default_type application/json;
            add_header Access-Control-Allow-Origin "*" always;
            return 401 '{"error": "Unauthorized", "message": "Invalid credentials or insufficient permissions"}';
        }

        # ユーザ認証システムからの403エラーハンドリング
        error_page 403 = @error403;
        location @error403 {
            default_type application/json;
            add_header Access-Control-Allow-Origin "*" always;
            return 403 '{"error": "Access Denied", "message": "You do not have the necessary privileges"}';
        }

        # ユーザ認証システムからのその他エラーハンドリング
        error_page 500 = @error500;
        location @error500 {
            default_type application/json;
            add_header Access-Control-Allow-Origin "*" always;
            return 500 '{"error": "Internal Server Error", "message": "Unexpected error occurred"}';
        }

        # バックエンドサービスダウン
        error_page 502 = @error502;
        location @error502 {
            default_type application/json;
            add_header Access-Control-Allow-Origin "*" always;
            return 502 '{"error": "Bad Gateway", "message": "There is a problem with server communication and the request cannot be processed"}';
        }
    }
}